// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model user {
    id    String @id @default(uuid())
    email String @unique

    stripeCustomerId String? // ‚ú®‚ú® This gets attached right after the user is created. See "authOptions.ts ‚ú®‚ú®"
    username         String
    avatar           String?
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    purchases        purchase[]
}

model video {
    id                 String     @id @default(uuid())
    author             String
    title              String
    description        String
    likes              Int
    views              Int
    s3VideoKey         String
    thumbnailLocalPath String
    price              Int
    purchases          purchase[]

    @@map("videos")
}

enum PurchaseStatus {
    SUCCESS
    FAILURE
    REFUNDED
    DISPUTED
}

model purchase {
    //‚ö†Ô∏è‚ö†Ô∏è Even though there are no unique constrains, when creating a session we look for uniqueness purchase ‚ö†Ô∏è‚ö†Ô∏è
    id String @id @default(uuid())

    paymentIntentId   String
    checkoutSessionId String //$ ‚ú®‚ú® For the Purchase History ‚ú®‚ú®

    status PurchaseStatus // ‚ú® Enum: On success webhook becomes "SUCCESS", on failure webhook becomes "FAILURE", on refund webhook becomes "REFUNDED" ‚ú®

    //* üü†üü† If it's an error üü†üü†:
    failureCode    String?
    failureMessage String?

    userId String
    user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)

    videoId String
    video   video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

    //‚ú®‚ú® These two are optional‚ú®‚ú®
    refundId String?
    refund   Refunds? @relation(fields: [refundId], references: [id], onDelete: Cascade)

    disputeId String?
    dispute   Disputes? @relation(fields: [disputeId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // @@unique([userId, videoId]) //$ ‚ö†Ô∏è‚ö†Ô∏è Had to remove this uniqueness to allow failed payments.
    @@map("purchases")
}

//‚ú®‚ú® Refunds are associated with  a Stripe Session (Cart). While we don't manage the context of a cart, we need only one refund per session, because that is WHAT STRIPE ALLOWS. Maybe we could also use partial refunds (like x% of it)‚ú®‚ú®
model Refunds {
    id             String  @id @default(uuid())
    stripeRefundId String? @unique // ‚ú®‚ú® It's optional because once a client REQUESTS a refund, the Stripe refund won't exist until manually  approved ‚ú®‚ú®.
    reason         String
    solved         Boolean

    purchases purchase[]
}

enum DisputeStatus {
    won
    lost
    needs_response
    under_review
    closed
    //‚ö†Ô∏è‚ö†Ô∏è Read Notion for the meaning of these ‚ö†Ô∏è‚ö†Ô∏è
    warning_closed
    warning_under_review
    warning_needs_response


}

model Disputes {
    id              String        @id @default(uuid())
    stripeDisputeId String        @unique
    reason          String
    status          DisputeStatus

    purchases       purchase[]
}

//$ ‚ú®‚ú® Storing event id's to prevent idempotency ‚ú®‚ú®
model ProcessedStripeEvents {
    id        String   @id //$ ‚ú®‚ú®This will be the  event ID‚ú®‚ú®
    eventType String
    createdAt DateTime @default(now())
}
