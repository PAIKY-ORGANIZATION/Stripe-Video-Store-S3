// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model user {
    id    String @id @default(uuid())
    email String @unique

    stripeCustomerId String? // This  gets attached right after the user is created. See "authOptions.ts"
    username         String
    avatar           String?
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    purchases        purchase[]
}

model video {
    id                 String     @id @default(uuid())
    author             String
    title              String
    description        String
    likes              Int
    views              Int
    s3VideoKey         String
    thumbnailLocalPath String
    price              Int
    purchases          purchase[]

    @@map("videos")
}

model purchase {
    id      String @id @default(uuid())
    userId  String
    videoId String

    paymentIntentId   String
    checkoutSessionId String //$ For the Purchase History

    success Boolean

    //* If it's an error:
    failureCode    String?
    failureMessage String?

    user  user  @relation(fields: [userId], references: [id], onDelete: Cascade)
    video video @relation(fields: [videoId], references: [id], onDelete: Cascade)
    refund Refunds?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // @@unique([userId, videoId]) //$ ⚠️⚠️ Had to remove this uniqueness to allow failed payments.
    @@map("purchases")
}



model Refunds {
    id String @id @default(uuid())
    stripeRefundId String

    purchaseId String @unique 
    purchase purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}




//$ Storing event id's to prevent idempotency
model ProcessedStripeEvents {
    id        String   @id //$ This will be the  event ID
    eventType String
    createdAt DateTime @default(now())
}
